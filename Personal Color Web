import React, { useRef, useState } from "react";
import Webcam from "react-webcam";
import { Button } from "@/components/ui/button";
import * as tf from "@tensorflow/tfjs";
import * as mobilenet from "@tensorflow-models/mobilenet";

const colorData = {
  "봄웜": { best: ["#FFD700", "#FFA07A", "#FF4500"], worst: ["#8A2BE2", "#4B0082", "#191970"] },
  "여름쿨": { best: ["#87CEFA", "#4682B4", "#B0C4DE"], worst: ["#DAA520", "#8B4513", "#A52A2A"] },
  "가을웜": { best: ["#FF8C00", "#CD853F", "#D2691E"], worst: ["#4169E1", "#000080", "#5F9EA0"] },
  "겨울쿨": { best: ["#00BFFF", "#1E90FF", "#6495ED"], worst: ["#FF6347", "#B22222", "#DC143C"] }
};

const PersonalColorAnalyzer = () => {
  const webcamRef = useRef(null);
  const [image, setImage] = useState(null);
  const [result, setResult] = useState(null);
  const [uploadedImage, setUploadedImage] = useState(null);

  const capture = async () => {
    const imageSrc = webcamRef.current.getScreenshot();
    setImage(imageSrc);
    await analyzeColor(imageSrc);
  };

  const handleImageUpload = (event) => {
    const file = event.target.files[0];
    if (file) {
      const reader = new FileReader();
      reader.onloadend = () => {
        setUploadedImage(reader.result);
        analyzeColor(reader.result);
      };
      reader.readAsDataURL(file);
    }
  };

  const analyzeColor = async (imageSrc) => {
    const img = new Image();
    img.src = imageSrc;
    img.onload = async () => {
      const model = await mobilenet.load();
      const tensor = tf.browser.fromPixels(img).resizeNearestNeighbor([224, 224]).expandDims().toFloat().div(255);
      const predictions = await model.classify(tensor);
      determineColor(predictions);
    };
  };

  const determineColor = (predictions) => {
    const keywords = predictions.map((pred) => pred.className.toLowerCase());
    if (keywords.some((word) => word.includes("warm"))) {
      setResult("봄웜");
    } else if (keywords.some((word) => word.includes("cool"))) {
      setResult("여름쿨");
    } else {
      setResult("가을웜");
    }
  };

  return (
    <div className="flex flex-col items-center p-4 bg-green-100 min-h-screen">
      <header className="w-full bg-green-500 text-white p-4 text-center text-2xl font-bold rounded-lg shadow-md">
        퍼스널 컬러 진단
      </header>
      <main className="bg-white p-6 rounded-lg shadow-lg w-full max-w-lg mt-6 text-center">
        <Webcam ref={webcamRef} screenshotFormat="image/jpeg" className="rounded-lg shadow-lg w-full" />
        <Button className="mt-4 w-full bg-white text-green-600 border border-green-500 rounded-full shadow-md p-2 text-lg font-semibold" onClick={capture}>
          웹캠으로 진단
        </Button>
        <p className="mt-4">또는 이미지를 업로드하세요</p>
        <input type="file" accept="image/*" onChange={handleImageUpload} className="mt-2" />
        {result && (
          <div className="mt-4 p-4 bg-green-50 rounded-lg shadow-md text-center w-full">
            <p className="text-xl font-semibold text-green-900">당신의 퍼스널 컬러는: {result}</p>
            <div className="grid grid-cols-2 gap-4 mt-4">
              <div className="p-4 bg-green-100 rounded-lg shadow-md">
                <p className="text-lg font-bold text-green-700">베스트 컬러</p>
                <div className="flex gap-2 justify-center mt-2">
                  {colorData[result]?.best.map((color, index) => (
                    <div key={index} className="w-10 h-10 rounded-full" style={{ backgroundColor: color }}></div>
                  ))}
                </div>
              </div>
              <div className="p-4 bg-red-100 rounded-lg shadow-md">
                <p className="text-lg font-bold text-red-700">워스트 컬러</p>
                <div className="flex gap-2 justify-center mt-2">
                  {colorData[result]?.worst.map((color, index) => (
                    <div key={index} className="w-10 h-10 rounded-full" style={{ backgroundColor: color }}></div>
                  ))}
                </div>
              </div>
            </div>
          </div>
        )}
      </main>
      <footer className="w-full text-center p-4 bg-green-500 text-white mt-6 rounded-lg shadow-md">
        © 2025 퍼스널 컬러 분석기
      </footer>
    </div>
  );
};

export default PersonalColorAnalyzer;
